@using GameTimelinePlanner.Shared.Domain.Entity
@inject HttpClient Http;

@if (Jobs != null)
{
    <div class="selector-container">
        <div class="job-displayer" @onclick="ToggleOpen">
            @if (PlayerJob != null)
            {
                <JobIcon Job="PlayerJob" IconSize="Model.IconSize.Auto" />
            }
            else
            {
                <div class="job-placeholder">
                    @("?")
                </div>
            }
        </div>
        <div class="job-container @($" {(_IsOpen ? "visible" : "hidden" )}")">
            <div class="job-displayer" @onclick="() => { HandleJobClick(null); }">
                <div class="job-placeholder">
                    @("?")
                </div>
            </div>
            @foreach (var job in Jobs.OrderBy(j => j.Role?.Type))
            {
                <div class="job-displayer">
                    <div class="job-selector" @onclick="() => { HandleJobClick(job); }">
                        <JobIcon Job="job" IconSize="Model.IconSize.Auto" />
                    </div>
                </div>
            }
        </div>
    </div>
}



@code {

    [Parameter]
    public Job? PlayerJob
    {
        get; set;
    }

    [Parameter]
    public EventCallback<Job> PlayerJobChanged { get; set; }

    [Parameter]
    public IList<Job>? Jobs { get; set; }

    private bool _IsOpen = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private void HandleJobClick(Job? job)
    {
        _IsOpen = false;
        PlayerJob = job;
        PlayerJobChanged.InvokeAsync(PlayerJob);
        Console.WriteLine(PlayerJob?.Name);
    }

    private async Task UnselectJob(MouseEventArgs e)
    {
        PlayerJob = null;
        await PlayerJobChanged.InvokeAsync(PlayerJob);
    }

    private void ToggleOpen(MouseEventArgs e)
    {
        _IsOpen = !_IsOpen;
    }
}
