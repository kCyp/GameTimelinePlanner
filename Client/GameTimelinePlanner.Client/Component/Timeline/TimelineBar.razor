@using GameTimelinePlanner.Shared.Domain.Entity;
@using System.Text

@if (Skill != null)
{
    <div class="timeline-skill" data-orientation=@Orientation>
        <div class=timeline-header data-orientation=@Orientation>
            <SkillIcon Skill="Skill" />
        </div>
        <div class="timeline-container" data-orientation=@Orientation>
            @* <div class="timeline-bar" /> *@
            <div class="timeline-all-portions" data-orientation=@Orientation>

                @for (int i = 0; i < 100; i++)
                {
                    int index = i;
                    <div class="timeline-portion @(GetClassOfPortion(index))"
                        data-orientation=@Orientation
                        @onmouseenter="() => SetPotentialUsage(index)"
                        @onmouseleave="() => DeletePotentialUsage()"
                        @onclick="() => ToggleUsage(index)">
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public Skill? Skill { get; set; }

    [Parameter]
    public Player? Player { get; set; }
    
    [CascadingParameter]
    public string? Orientation { get; set; }

    private SkillUsage? _PotentialUsage { get; set; }

    private static readonly decimal _DurationOfPortion = 2.5m;

    private void SetPotentialUsage(int index)
    {
        decimal useTime = _DurationOfPortion * index;
        _PotentialUsage = new SkillUsage(Skill!, useTime);
    }

    private void DeletePotentialUsage()
    {
        _PotentialUsage = null;
    }

    private void ToggleUsage(int index)
    {
        if (Player != null && Skill != null)
        {
            decimal timeOfPortion = _DurationOfPortion * index;

            if (Player.HasSkillAtExactStartTime(Skill, timeOfPortion))
            {
                Player.RemoveSkillUsage(Skill, timeOfPortion);
            }
            else
            {
                Player.AddSkillUsage(Skill, timeOfPortion);
            }
        }
    }

    private string GetClassOfPortion(int index)
    {
        if (Player == null || Skill == null)
        {
            return string.Empty;
        }

        decimal timeOfPortion = _DurationOfPortion * index;
        if (_PotentialUsage != null)
        {
            if (_PotentialUsage.StartTime == timeOfPortion)
            {
                return "potential";
            }
            if (_PotentialUsage.IsActiveAt(timeOfPortion))
            {
                return "potential-active";
            }
            if (_PotentialUsage.IsInCooldownAt(timeOfPortion))
            {
                return "potential-cooldown";
            }
        }

        if (Player.HasSkillAtExactStartTime(Skill, timeOfPortion))
        {
            return "skill";
        }

        if (Player.HasSkillActive(Skill, timeOfPortion))
        {
            return "skill-active";
        }

        if (Player.HasSkillInCooldown(Skill, timeOfPortion))
        {
            return "skill-cooldown";
        }

        return string.Empty;
    }
}
